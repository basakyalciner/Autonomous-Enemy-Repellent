import cv2
import numpy as np
import serial
import time
import struct

cap = cv2.VideoCapture(1)
cv2.namedWindow("Detector", cv2.WINDOW_NORMAL)
cv2.resizeWindow("Detector", 1280, 720)

model = cv2.dnn.readNetFromDarknet(r"yolov4-tiny-ders.cfg", r"yolov4-tiny-ders_last.weights")
layers = model.getLayerNames()
output_layer = [layer for layer in model.getLayerNames() if "yolo" in layer]
labels = [" ", "enemy", " "]

colors = ["0,0,255", "255,100,0", "100,0,255", "255,255,0", "0,255,0"]
colors = [np.array(color.split(",")).astype("int") for color in colors]
colors = np.array(colors)
colors = np.tile(colors, (18, 1))

frame_counter = 0
arduino = serial.Serial(port='COM6', baudrate=115200, timeout=.1)

while True:
    ret, frame = cap.read()
    frame = cv2.resize(frame, (416, 416))
    frame_width = frame.shape[1]
    frame_height = frame.shape[0]
    frame_blob = cv2.dnn.blobFromImage(frame, 1 / 255, (416, 416), swapRB=True, crop=False)
    model.setInput(frame_blob)
    detection_layers = model.forward(output_layer)
    enemy_detected = False
    if frame_counter % 100 == 0:
        model.setInput(frame_blob)
        detection_layers = model.forward(output_layer)

        ids_list = []
        boxes_list = []
        confidences_list = []

        for detection_layer in detection_layers:
            for object_detection in detection_layer:
                scores = object_detection[5:]
                predicted_id = np.argmax(scores)

                confidence = scores[predicted_id]

                if confidence > 0.20:
                    label = labels[predicted_id]
                    bounding_box = object_detection[0:4] * np.array([frame_width, frame_height, frame_width, frame_height])
                    (box_center_x, box_center_y, box_width, box_height) = bounding_box.astype("int")
                    start_x = int(box_center_x - (box_width / 2))
                    start_y = int(box_center_y - (box_height / 2))

                    ids_list.append(predicted_id)
                    confidences_list.append(float(confidence))
                    boxes_list.append([start_x, start_y, int(box_width), int(box_height)])

                    if label == "enemy":
                        enemy_detected = True

        max_ids = cv2.dnn.NMSBoxes(boxes_list, confidences_list, 0.5, 0.4)
        detected_objects = []
        for max_id in max_ids:
            max_class_id = int(max_id)
            predicted_id = ids_list[max_class_id]

            # Check if the predicted label is "enemy"
            if labels[predicted_id] == "enemy":
                box = boxes_list[max_class_id]
                start_x = box[0]
                start_y = box[1]
                box_width = box[2]
                box_height = box[3]
                confidence = confidences_list[max_class_id]
                end_x = start_x + box_width
                end_y = start_y + box_height

                # Print rectangle values for enemy
                

                rect_x = start_x + box_width // 2
                rect_y = start_y + box_height // 2
                frame_center_x = frame.shape[1] // 2
                frame_center_y = frame.shape[0] // 2
                plus_size = 10
                plus_x = frame_center_x
                plus_y = frame_center_y

                box_color = colors[predicted_id]
                box_color = [int(each) for each in box_color]
                label = "{}: {:.2f}%".format(label, confidence * 100)

                cv2.rectangle(frame, (start_x, start_y), (end_x, end_y), box_color, 1)
                cv2.rectangle(frame, (start_x - 1, start_y), (end_x + 1, start_y - 30), box_color, -1)
                cv2.putText(frame, label, (start_x, start_y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

                if enemy_detected:
                    a = plus_x - rect_x
                    b = plus_y - rect_y
                    x_fark = a
                    y_fark = b
                    veriler = [x_fark, y_fark]
                    cv2.putText(frame, "Detect Enemy!", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,0), 2)
                    for veri in veriler:
                        arduino.write(str(veri).encode())
                        arduino.write(b'\n')  # Arduino'da yeni satÄ±r karakterini bekleme

              
    # Draw a plus sign in the center of the frame
    frame_center_x = frame.shape[1] // 2
    frame_center_y = frame.shape[0] // 2
    plus_size = 10
    plus_color = (0, 0, 0)
    cv2.line(frame, (frame_center_x - plus_size, frame_center_y), (frame_center_x + plus_size, frame_center_y), plus_color, 2)
    cv2.line(frame, (frame_center_x, frame_center_y - plus_size), (frame_center_x, frame_center_y + plus_size), plus_color, 2)
    x1 = frame_center_x
    y1 = frame_center_y

    cv2.imshow("Detector", frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()
